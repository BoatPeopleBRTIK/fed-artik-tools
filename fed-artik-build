#!/bin/bash

BUILDCONFIG="~/.fed-artik-build.conf"
BUILDROOT=
BUILDARCH=armv7hl
INCLUDE_ALL=
DEFINE=
SPECFILE=
SPECDIR=packaging
CLEAN_REPOS=false
CLEAN_REPOS_AND_EXIT=false
FEDORA_GIT=false
DOWNLOAD_SOURCE=false
HOSTS=/etc/hosts
NO_PROXY=

SRC_DIR=/root/rpmbuild/SOURCES
SPEC_DIR=/root/rpmbuild/SPECS
RPM_DIR=/root/rpmbuild/RPMS

pkg_src_type=
pkg_name=
pkg_version=
pkg_full_name=

. `dirname "$(readlink -f "$0")"`/fed-artik-common.inc

usage() {
	cat <<EOF
	usage: ${0##*/} [options]

	-h              Print this help message
	-B BUILDROOT	BUILDROOT directory, if not specified read from ~/.fed-artik-build.conf
	-C conf		Build configurations(If not specified, use default .fed-artik-build.conf
	-A ARCH		Build Architecture. armv7hl
	-H [hosts]	Hosts file to bind /etc/hosts
	--include-all	uncommitted changes and untracked files would be
	                included while generating tar ball
	--define DEFINE	define macro X with value Y with format "X Y"
	--spec SPECFILE	specify a spec file to use. It should be a file name
	                that this tool will find it in packaging dir
	--clean-repos	Clean up repo directory before build
	--no-proxy list	No proxy
EOF
	exit 0
}

parse_options()
{
	for opt in "$@"
	do
		case "$opt" in
			-h|--help)
				usage
				shift ;;
			-B|--buildroot)
				BUILDROOT=`readlink -e "$2"`
				[ ! -d $BUILDROOT ] && die "cannot find buildroot"
				shift ;;
			-C)
				BUILDCONFIG=`readlink -e "$2"`
				shift ;;
			-A|--arch)
				BUILDARCH="$2"
				shift ;;
			--include-all)
				INCLUDE_ALL=true
				shift ;;
			--define)
				DEFINE="$2"
				shift ;;
			--spec)
				SPECFILE="$2"
				shift ;;
			--clean-repos)
				CLEAN_REPOS=true
				shift ;;
			--clean-repos-and-exit)
				CLEAN_REPOS=true
				CLEAN_REPOS_AND_EXIT=true
				shift ;;
			--no-proxy)
				NO_PROXY="$2"
				shift ;;
			-H)
				HOSTS="$2"
				shift ;;
			*)
				shift ;;
		esac
	done
}

parse_source_type()
{
	local __src_type=$1
	SOURCE_TYPE="tar.gz tgz tar.bz2 tar.xz"

	for _type in $SOURCE_TYPE
	do
		result=`grep "^Source[0-9]:\|^Source:" $SPECFILE | grep "$_type"` || true
		if [ "$result" != "" ]; then
			eval $__src_type=$_type
			break
		fi
	done
}

parse_pkg_info()
{
	parse_source_type pkg_src_type
	[ "$pkg_src_type" == "" ] && die "cannot find source type from spec"

	pkg_name=`grep '^Name:' $SPECFILE | awk '{ print $2 }'`
	[ "$pkg_name" == "" ] && die "cannot find package name from spec"

	pkg_version=`grep '^Version:' $SPECFILE | awk '{ print $2 }'`
	[ "$pkg_version" == "" ] && die "cannot find package version from spec"

	pkg_full_name=`rpmspec --query --srpm --queryformat="%{Source}" $SPECFILE`
	[ "$pkg_full_name" == "" ] && die "cannot find package version from spec"
	echo "1" > /dev/null
}

archive_git_source()
{
	local src_dir=$1
	local head=

	if [ $INCLUDE_ALL ]; then
		uploadStash=`git stash create`
		head=${uploadStash:-HEAD}
	else
		head=HEAD
	fi

	pkg_directory=${pkg_full_name%.$pkg_src_type}
	case "$pkg_src_type" in
		tar.gz|tgz)
			sudo sh -c "git archive --format=$pkg_src_type --prefix=$pkg_directory/ -o $src_dir/$pkg_full_name $head"
			;;
		tar.bz2)
			sudo sh -c "git archive --format=tar --prefix=$pkg_directory/ $head | bzip2 > $src_dir/$pkg_full_name"
			;;
		tar.xz)
			sudo sh -c "git archive --format=tar --prefix=$pkg_directory/ $head | xz > $src_dir/$pkg_full_name"
			;;
	esac
}

setup_local_repo()
{
	local scratch_root=$1
	local local_repo=$2

	rm -rf $local_repo/repodata
	createrepo $local_repo
	sudo sh -c "cat > $scratch_root/etc/yum.repos.d/local.repo << __EOF__
[local]
name=Fedora-Local
baseurl=file://${local_repo}
enabled=1
gpgcheck=0
__EOF__"
}

setup_remote_repo()
{
	local scratch_root=$1
	local remote_repo=$2
sudo sh -c "cat > $scratch_root/etc/yum.repos.d/artik.repo << __EOF__
[artik]
name=Fedora-artik
baseurl=${remote_repo}
enabled=1
gpgcheck=0
__EOF__"
}

run_rpmbuild()
{
	local scratch_root=$1
	local local_repo=$2
	local spec_base=$(basename "$SPECFILE")
	local build_cmd=

	if [ "$NO_PROXY" != "" ]; then
		build_cmd+="export no_proxy=$NO_PROXY;"
	fi

	build_cmd="rm -rf /var/cache/dnf/local*; dnf makecache;"
	if $DOWNLOAD_SOURCE; then
		build_cmd+="spectool -g -R $SRC_DIR/$spec_base;"
	fi
	build_cmd+="dnf -y --best --allowerasing builddep $SRC_DIR/$spec_base; rpmbuild --target=$BUILDARCH -ba"
	if [ "$DEFINE" != "" ]; then
		build_cmd+=" --define \"$DEFINE\""
	fi
	build_cmd+=" $SRC_DIR/$spec_base"

	sudo -H $SCRIPT_DIR/chroot_fedora -H $HOSTS -b $local_repo $scratch_root "$build_cmd"
}

copy_output_rpms()
{
	local scratch_root=$1
	local local_repo=$2
	local build_arch=$3

	local output_rpms=`rpmspec --query --rpms --queryformat "%{NAME} " $SPECFILE`

	for pkg in $output_rpms
	do
		sudo sh -c "cp -f $scratch_root/$RPM_DIR/$build_arch/$pkg*.rpm $local_repo 2> /dev/null"
		sudo sh -c "cp -f $scratch_root/$RPM_DIR/noarch/$pkg*noarch*.rpm $local_repo 2> /dev/null"
		sudo sh -c "chown $user:$user $local_repo/*"
	done
}

detect_spec_file()
{
	specfile=`find $SPECDIR -name "*.spec"`
	if [ "$specfile" == "" ]; then
		SPECDIR=`pwd`
		specfile=`find $SPECDIR -name "*.spec"`
	fi

	[ -e $specfile ] || die "not found spec file"

	SPECFILE=$specfile
}

detect_fedora_git()
{
	if [ -e $SPECDIR/sources ]; then
		SOURCE=`cat $SPECDIR/sources | awk '{ print $2 }'`
		for src in $SOURCE
		do
			if [ ! -e $SPECDIR/$src ]; then
				DOWNLOAD_SOURCE=true
			fi
		done
		FEDORA_GIT=true
	fi
}

if [ "BUILDCONFIG" == "~/.fed-artik-build.conf" ]; then
	BUILDCONFIG="${BUILDCONFIG/#\~/$(eval echo ~$SUDO_USER)}"
fi

parse_options "$@"
parse_config $BUILDCONFIG
parse_options "$@"

BUILDROOT="${BUILDROOT/#\~/$(eval echo ~$SUDO_USER)}"
eval BUILDROOT=$BUILDROOT

BUILDROOT="${BUILDROOT/#\~/$(eval echo ~$SUDO_USER)}"
eval BUILDROOT=$BUILDROOT
SCRATCH_ROOT=$BUILDROOT/BUILDROOT
LOCAL_REPO=$BUILDROOT/repos/$FEDORA_VER/$BUILDARCH/RPMS

if $CLEAN_REPOS ; then
	sudo rm -rf $LOCAL_REPO/*
	if $CLEAN_REPOS_AND_EXIT ; then
		exit 0
	fi
fi

if [ "$SPECFILE" == "" ]; then
	detect_spec_file
fi
parse_pkg_info

detect_fedora_git
if ! $FEDORA_GIT; then
	archive_git_source $SCRATCH_ROOT/$SRC_DIR
fi

sudo cp -f $SPECDIR/* $SCRATCH_ROOT/$SRC_DIR

setup_local_repo $SCRATCH_ROOT $LOCAL_REPO
if [ "$REPO_URL" != "" ]; then
	setup_remote_repo $SCRATCH_ROOT $REPO_URL
fi
run_rpmbuild $SCRATCH_ROOT $LOCAL_REPO
copy_output_rpms $SCRATCH_ROOT $LOCAL_REPO $BUILDARCH

echo "Build is done. Please find your rpm from " $LOCAL_REPO
